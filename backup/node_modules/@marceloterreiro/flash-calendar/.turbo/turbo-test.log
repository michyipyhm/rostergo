$ bun test
bun test v1.1.17 (bb66bba1)

src/hooks/useCalendarList.test.ts:
(pass) getHeightForMonth > Measures months with 5 weeks (no calendar spacing) [0.93ms]
(pass) getHeightForMonth > Measures months with 5 weeks (with calendar spacing) [0.05ms]
(pass) getHeightForMonth > Accounts for additional height [0.04ms]
(pass) getHeightForMonth > Measures months with 6 weeks [0.04ms]
(pass) getHeightForMonth > February 24 has the right height with base options [3.03ms]
(pass) useCalendarList > Min/Max dates > Max: virtualization still works as expected [8.31ms]
(pass) useCalendarList > Min/Max dates > Min: virtualization still works as expected [1.22ms]
(pass) useCalendarList > Min/Max dates > Returns a single month when min and max are in the same month [0.44ms]
(pass) useCalendarList > Min/Max dates > Returns a range of months bounded by the min and max dates [0.46ms]
(pass) useCalendarList > Min/Max dates > Ignores past/future scroll ranges when min/max dates are used [0.42ms]
(pass) useCalendarList > Min/Max dates > Append/Prepend are no-op if min/max are reached [1.06ms]
(pass) useCalendarList > github issues > #16: Incorrect scroll position when setting calendarMinDateId [0.46ms]
(pass) useCalendarList > Data is correctly built when future/past ranges are 0 [0.27ms]

src/hooks/useDateRange.test.ts:
(pass) useDateRange > should initialize with correct default values [0.47ms]
(pass) useDateRange > should update dateRange correctly on onCalendarDayPress [0.91ms]
(pass) useDateRange > should clear dateRange on onClearDateRange [0.75ms]
(pass) useDateRange > should update isDateRangeValid correctly [0.73ms]
(pass) useDateRange > can initialize a date range [0.38ms]

src/hooks/useOptimizedDayMetadata.test.ts:
(pass) useOptimizedDayMetadata > return the base metadata as the initial value [1.08ms]
(pass) useOptimizedDayMetadata > if the base changes, the returned value should match it. [2.15ms]
(pass) useOptimizedDayMetadata > endOfRange: returns the updated metadata once an event is emitted [1.15ms]
(pass) useOptimizedDayMetadata > startOfRange: returns the updated metadata once an event is emitted [0.68ms]
(pass) useOptimizedDayMetadata > startOfRange|endOfRange: returns the updated metadata once an event is emitted [0.79ms]
(pass) useOptimizedDayMetadata > doesn't re-render if the active dates don't overlap [2.55ms]
(pass) useOptimizedDayMetadata > resets the state once a new range is selected [1.46ms]
(pass) useOptimizedDayMetadata with calendarInstanceId > uses the default instance ID when not provided [0.84ms]
(pass) useOptimizedDayMetadata with calendarInstanceId > responds to events for the correct instance ID [0.44ms]
(pass) useOptimizedDayMetadata with calendarInstanceId > ignores events for different instance IDs [0.35ms]
(pass) useOptimizedDayMetadata with calendarInstanceId > handles multiple instances correctly [0.86ms]
(pass) useOptimizedDayMetadata with calendarInstanceId > resets state for the correct instance when a new range is selected [0.58ms]

src/hooks/useCalendar.test.ts:
(pass) buildCalendar > isLastDayOfWeek > isLastDayOfWeek respects "sunday" as last day of week [17.98ms]
(pass) buildCalendar > isLastDayOfWeek > isLastDayOfWeek respects "monday" as last day of week [5.25ms]
(pass) buildCalendar > isWeekend > starting on sunday [4.17ms]
(pass) buildCalendar > isWeekend > starting on monday [3.65ms]
(pass) buildCalendar > state > active: supersedes today [3.33ms]
(pass) buildCalendar > state > active: supersedes disabled (with calendarDisabledDateIds) [4.23ms]
(pass) buildCalendar > state > active: supersedes disabled (with min) [4.89ms]
(pass) buildCalendar > state > active: supersedes disabled (with max) [3.64ms]
(pass) buildCalendar > state > active: supersedes idle [3.19ms]
(pass) buildCalendar > state > disabled: supersedes idle [3.26ms]
(pass) buildCalendar > state > today: supersedes idle [3.26ms]
(pass) buildCalendar > state > idle: serves as the base state [3.68ms]
(pass) buildCalendar > builds the month row [3.19ms]
(pass) buildCalendar > build the month row with custom formatting [3.93ms]
(pass) buildCalendar > builds the week days row starting on sunday [6.02ms]
(pass) buildCalendar > builds the week days row starting on monday [4.55ms]
(pass) buildCalendar > builds the weeks row [5.02ms]
(pass) buildCalendar > build the weeks row with custom formatting [3.82ms]
(pass) buildCalendar > handles the expected range [3.16ms]
(pass) buildCalendar > calendarMinDate [3.53ms]
(pass) buildCalendar > calendarMaxDate [4.08ms]

src/helpers/dates.test.ts:
(pass) toDateId: UTC time zone > January 1st, 2024 [0.94ms]
(pass) toDateId: UTC time zone > January 31th, 2024 [0.06ms]
(pass) toDateId: UTC time zone > February 1st, 2024 [0.05ms]
(pass) toDateId: UTC time zone > February 10th, 2024 [0.04ms]
(pass) toDateId: UTC time zone > convert between ID -> Date -> ID returns the original result [0.04ms]
(pass) toDateId: Brasilia time zone  > January 1st, 2024 [0.04ms]
(pass) toDateId: Brasilia time zone  > January 31th, 2024 [0.05ms]
(pass) toDateId: Brasilia time zone  > February 1st, 2024 [0.04ms]
(pass) toDateId: Brasilia time zone  > February 10th, 2024 [0.04ms]
(pass) toDateId: Brasilia time zone  > February 29th, 2024 [0.05ms]
(pass) toDateId: Brasilia time zone  > convert between ID -> Date -> ID returns the original result [0.06ms]
(pass) fromDateId: UTC time zone > parse Jan 1st [0.05ms]
(pass) fromDateId: UTC time zone > parses March 1st [0.03ms]
(pass) fromDateId: Brasilia time zone > parse Jan 1st [0.04ms]
(pass) fromDateId: Brasilia time zone > parses March 1st [0.04ms]
(pass) startOfMonth > January [0.05ms]
(pass) startOfMonth > February [0.04ms]
(pass) startOfMonth > matches date-fns [4.57ms]
(pass) endOfMonth > January [0.07ms]
(pass) endOfMonth > February [0.05ms]
(pass) endOfMonth > matches date-fns [5.11ms]
(pass) startOfWeek > sunday: week of February 17th [0.05ms]
(pass) startOfWeek > sunday: week of February 11th [0.04ms]
(pass) startOfWeek > monday: week of February 17th [0.03ms]
(pass) startOfWeek > monday: week of February 11th [0.04ms]
(pass) startOfWeek > matches date-fns [6.28ms]
(pass) addMonths > add 1 month [0.11ms]
(pass) addMonths > add 10 months [0.06ms]
(pass) addMonths > matches date-fns [1.11ms]
(pass) subMonths > sub 1 month [0.10ms]
(pass) subMonths > sub 10 months [0.05ms]
(pass) subMonths > matches date-fns [1.54ms]
(pass) addDays > add 1 day [0.09ms]
(pass) addDays > add 10 days [0.04ms]
(pass) addDays > matches date-fns [0.47ms]
(pass) subDays > sub 1 day [0.08ms]
(pass) subDays > sub 10 days [0.04ms]
(pass) subDays > matches date-fns [1.08ms]
(pass) isWeekend > Friday [0.05ms]
(pass) isWeekend > Saturday [0.29ms]
(pass) isWeekend > Sunday [0.05ms]
(pass) isWeekend > Monday [0.03ms]
(pass) differenceInMonths  > edge cases > it returns diff of 1 month between Feb 28 2021 and Jan 30 2021 [0.05ms]
(pass) differenceInMonths  > edge cases > it returns diff of 1 month between Feb 28 2021 and Jan 31 2021 [0.04ms]
(pass) differenceInMonths  > edge cases > it returns diff of 1 month between Nov, 30 2021 and Oct, 31 2021 [0.03ms]
(pass) differenceInMonths  > edge cases > it returns diff of 1 month between Oct, 31 2021 and Sep, 30 2021 [0.03ms]
(pass) differenceInMonths  > edge cases > it returns diff of 6 month between Oct, 31 2021 and Apr, 30 2021 [0.03ms]
(pass) differenceInMonths  > edge cases > it returns diff of -1 month between Sep, 30 2021 and Oct, 31 2021 [0.03ms]
(pass) differenceInMonths  > edge cases > the days of months of the given dates are the same [0.04ms]
(pass) differenceInMonths  > edge cases > the given dates are the same [0.03ms]
(pass) differenceInMonths  > edge cases > does not return -0 when the given dates are the same [0.06ms]
(pass) differenceInMonths  > edge cases > returns the number of full months between the given dates - end of Feb [0.07ms]
(pass) differenceInMonths  > returns the number of full months between the given dates [0.04ms]
(pass) differenceInMonths  > returns a negative number if the time value of the first date is smaller [0.03ms]
(pass) differenceInMonths  > returns NaN if the first date is `Invalid Date` [0.04ms]
(pass) differenceInMonths  > returns NaN if the second date is `Invalid Date` [0.03ms]
(pass) differenceInMonths  > returns NaN if the both dates are `Invalid Date` [0.03ms]
(pass) getWeeksInMonth > sunday: Month with 5 weeks [0.08ms]
(pass) getWeeksInMonth > sunday: Month with 6 weeks [0.04ms]
(pass) getWeeksInMonth > monday: Month with 5 weeks [0.10ms]
(pass) getWeeksInMonth > matches date-fns [10.60ms]
(pass) getWeekOfMonth > sunday: June [0.38ms]
(pass) getWeekOfMonth > monday: June [0.10ms]
(pass) getWeekOfMonth > matches date-fns [4.88ms]

 115 pass
 0 fail
 8695 expect() calls
Ran 115 tests across 5 files. [343.00ms]
